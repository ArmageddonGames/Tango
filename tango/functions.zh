// tango.zh alpha 2
// Constants and functions relating to functions and variables.

// Used in converting names to numbers
const int __TANGO_CODE_FACTOR = 7;

// Setters
const float __TANGO_SETTER_SET       = 0.0986;
const float __TANGO_SETTER_INCREMENT = 6408.5111;

// Flow control functions
const float __TANGO_FLOW_IF        =     0.0069;
const float __TANGO_FLOW_WHILE     =     5.8497;
const float __TANGO_FLOW_WAITUNTIL = 13486.5225;

// Other functions
const float __TANGO_FUNC_ADD       =    0.0081;
const float __TANGO_FUNC_OR        =    0.0123;
const float __TANGO_FUNC_AND       =    0.0151;
const float __TANGO_FUNC_NOT       =    0.0811;
const float __TANGO_FUNC_TAB       =    0.0989;
const float __TANGO_FUNC_CHAR      =    0.1446;
const float __TANGO_FUNC_LESS      =    0.4513;
const float __TANGO_FUNC_NEXT      =    0.5235;
const float __TANGO_FUNC_RAND      =    0.6325;
const float __TANGO_FUNC_DELAY     =    1.1939;
const float __TANGO_FUNC_EQUAL     =    1.8884;
const float __TANGO_FUNC_APPEND    =    6.1058;
const float __TANGO_FUNC_CHOICE    =    7.5241;
const float __TANGO_FUNC_DOMENU    =   10.8066;
const float __TANGO_FUNC_NUMBER    =   29.0329;
const float __TANGO_FUNC_STRING    =   37.4073;
const float __TANGO_FUNC_GREATER   =  113.9450;
const float __TANGO_FUNC_ORDINAL   =  208.0657;
const float __TANGO_FUNC_PLAYSFX   =  209.6041;
const float __TANGO_FUNC_NOTEQUAL  = 1364.9361;
const float __TANGO_FUNC_SAVENAME  = 1615.1672;

// Variables
const float __TANGO_VAR_D0      =  0.0055;
const float __TANGO_VAR_D1      =  0.0056;
const float __TANGO_VAR_D2      =  0.0057;
const float __TANGO_VAR_D3      =  0.0058;
const float __TANGO_VAR_D4      =  0.0059;
const float __TANGO_VAR_D5      =  0.0060;
const float __TANGO_VAR_D6      =  0.0061;
const float __TANGO_VAR_D7      =  0.0062;
const float __TANGO_VAR_A0      =  0.0034;
const float __TANGO_VAR_A1      =  0.0035;
const float __TANGO_VAR_X       =  0.0024;
const float __TANGO_VAR_Y       =  0.0025;
const float __TANGO_VAR_CSET    =  0.2015;
const float __TANGO_VAR_COLOR   =  1.3059;
const float __TANGO_VAR_SPEED   =  5.1391;
const float __TANGO_VAR_SFX     =  0.0997;
const float __TANGO_VAR_NEXT    =  0.5235;
const float __TANGO_VAR_CHOSEN  =  7.5754;
const float __TANGO_VAR_DEFAULT = 57.0523;

// Data markers
const int __TANGO_NUM_MARKER = -100;
const int __TANGO_VAR_MARKER = -200;
const int __TANGO_SETTER_MARKER = -300;
const int __TANGO_FUNC_MARKER = -400;
const int __TANGO_FUNC_END_MARKER = -500;
const int __TANGO_FLOW_MARKER = -600;
const int __TANGO_FLOW_END_MARKER = -700;


// Runs @if, @while, and @waituntil.
int __Tango_RunFlowControl(int pos)
{
    int type=__Tango_StringBuffer[pos+1];
    int ret=0;
    int offset=2;
    bool clear=true;
    
    int argLength=__Tango_ReadArgLength(pos+2);
    int condition=__Tango_ReadArg(pos+2);
    
    if(type==__TANGO_FLOW_IF)
    {
        if(condition)
        {
            if(__Tango_StringBuffer[pos+2+argLength]==__TANGO_FUNC_MARKER)
                ret=__Tango_RunFunction(pos+2+argLength, false);
            else
                __Tango_RunSetter(pos+2+argLength, false);
        }
    }
    else if(type==__TANGO_FLOW_WHILE)
    {
        if(condition)
        {
            if(__Tango_StringBuffer[pos+2+argLength]==__TANGO_FUNC_MARKER)
                __Tango_RunFunction(pos+2+argLength, false);
            else
                __Tango_RunSetter(pos+2+argLength, false);
            ret=1;
            clear=false;
        }
    }
    else // @waituntil
    {
        if(!condition)
        {
            ret=1;
            clear=false;
        }
    }
    
    if(clear)
    {
        int end=pos+6; // The earliest the end can be
        while(__Tango_StringBuffer[end]!=__TANGO_FLOW_END_MARKER)
            end++;
        __Tango_AddFiller(pos, end);
    }
    
    return ret;
}


// Runs @set or @increment. If clear is true, the setter and its arguments
// in __Tango_StringBuffer[] will be deleted.
void __Tango_RunSetter(int pos, bool clear)
{
    int type=__Tango_StringBuffer[pos+1];
    int var=__Tango_StringBuffer[pos+3];
    int argLength=__Tango_ReadArgLength(pos+4);
    int value=__Tango_ReadArg(pos+4);
    
    // Only two cases: @set and @increment.
    // For @increment, just add the variable's current value to the given value.
    if(type==__TANGO_SETTER_INCREMENT)
        value+=__Tango_GetVar(var);
    
    __Tango_SetVar(var, value);
    
    if(clear)
        __Tango_AddFiller(pos, pos+3+argLength);
}


// Runs other functions. If clear is true, the function and its arguments
// in __Tango_StringBuffer[] will be deleted.
int __Tango_RunFunction(int pos, bool clear)
{
    int function=__Tango_StringBuffer[pos+1];
    int totalLength=2;
    int argLength;
    int args[2];
    int ret;
    
    // Read arguments first.
    for(int i=0; true; i++)
    {
        argLength=__Tango_ReadArgLength(pos+totalLength);
        if(argLength==0)
            break;
        if(i>=2)
        {
            __Tango_LogError(__TANGO_ERROR_TOO_MANY_ARGS, 0);
            continue; // Read the rest just to clear them out
        }
        
        args[i]=__Tango_ReadArg(pos+totalLength);
        totalLength+=argLength;
    }
    
    // Clear out the space where the function and its arguments were stored.
    if(clear)
        __Tango_AddFiller(pos, pos+totalLength); // Add 1 for the end marker
    
    // Text functions
    if(function==__TANGO_FUNC_CHAR)
        __Tango_StringBuffer[pos]=args[0];
    else if(function==__TANGO_FUNC_NUMBER)
        __Tango_FuncNumber(args[0], pos);
    else if(function==__TANGO_FUNC_ORDINAL)
        __Tango_FuncOrdinal(args[0], pos);
    else if(function==__TANGO_FUNC_STRING)
        __Tango_FuncString(args[0], pos);
    else if(function==__TANGO_FUNC_SAVENAME)
        __Tango_FuncSaveName(pos);
    
    // Numeric functions
    else if(function==__TANGO_FUNC_ADD)
        ret=args[0]+args[1];
    else if(function==__TANGO_FUNC_RAND)
        ret=Rand(args[0], args[1]);
    
    // Condition functions
    else if(function==__TANGO_FUNC_EQUAL)
        ret=__Tango_BoolToInt(args[0]==args[1]);
    else if(function==__TANGO_FUNC_NOTEQUAL)
        ret=__Tango_BoolToInt(args[0]!=args[1]);
    else if(function==__TANGO_FUNC_GREATER)
        ret=__Tango_BoolToInt(args[0]>args[1]);
    else if(function==__TANGO_FUNC_LESS)
        ret=__Tango_BoolToInt(args[0]<args[1]);
    else if(function==__TANGO_FUNC_OR)
        ret=__Tango_BoolToInt(args[0]!=0 || args[1]!=0);
    else if(function==__TANGO_FUNC_AND)
        ret=__Tango_BoolToInt(args[0]!=0 && args[1]!=0);
    else if(function==__TANGO_FUNC_NOT)
        ret=__Tango_BoolToInt(args[0]==0);
    
    // Other functions
    else if(function==__TANGO_FUNC_CHOICE)
        __Tango_FuncAddMenuItem(pos, args[0]);
    else if(function==__TANGO_FUNC_DOMENU)
        __Tango_FuncActivateMenu(pos);
    else if(function==__TANGO_FUNC_PLAYSFX)
        Game->PlaySound(args[0]);
    else if(function==__TANGO_FUNC_APPEND)
        __Tango_AppendMessage(pos+totalLength, args[0]);
    else if(function==__TANGO_FUNC_TAB)
        __Tango_FuncTab(args[0]);
    else if(function==__TANGO_FUNC_NEXT)
        __Tango_SetVar(__TANGO_VAR_NEXT, args[0]);
    else if(function==__TANGO_FUNC_DELAY)
    {
        __Tango_SetCurrStrData(__TANGO_DATA_COUNTER, args[0]);
        ret=1;
    }
    
    // Custom functions
    else
    {
        int i;
        for(i=0; i<__TANGO_NUM_CUSTOM_FUNCTIONS; i++)
        {
            if(function==__TANGO_CUSTOM_FUNCTIONS[i])
            {
                ret=__Tango_RunCustomFunction(function, args);
                break;
            }
        }
        
        if(i==__TANGO_NUM_CUSTOM_FUNCTIONS) // Didn't find it
            __Tango_LogError(__TANGO_ERROR_BAD_FUNCTION, function);
    }
    
    return ret;
}


// Determines the length of an argument.
int __Tango_ReadArgLength(int pos)
{
    int type=__Tango_StringBuffer[pos];
    
    if(type==__TANGO_NUM_MARKER || type==__TANGO_VAR_MARKER)
        return 2;
    else if(type==__TANGO_FUNC_MARKER)
    {
        int depth=0;
        int character;
        int length=0;
        
        do
        {
            character=__Tango_StringBuffer[pos+length];
            
            if(character==__TANGO_FUNC_MARKER)

                depth++;
            else if(character==__TANGO_FUNC_END_MARKER)
                depth--;
            
            length++;
        } while(depth>0);
        
        return length;
    }
    // The only other thing that's valid here is an end marker
    // indicating there are no more arguments
    else
        return 0;
}


// Get the value of an argument, reading variables or
// running functions if needed.
int __Tango_ReadArg(int pos)
{
    int argType=__Tango_StringBuffer[pos];
    
    if(argType==__TANGO_FUNC_MARKER)
        return __Tango_RunFunction(pos, false);

    else if(argType==__TANGO_VAR_MARKER)
        return __Tango_GetVar(__Tango_StringBuffer[pos+1]);
    
    else // Number (or maybe something invalid)
        return __Tango_StringBuffer[pos+1];
}


// Convert true to 1 and false to 0, since ZScript doesn't allow casting
// bool to int. This is just used to make the conditional functions less ugly.
int __Tango_BoolToInt(bool value)
{
    if(value)
        return 1;
    else
        return 0;
}


// Implementation of @append
void __Tango_AppendMessage(int index, int messageID)
{
    // Find the end of the string
    while(!(__Tango_StringBuffer[index]==NULL &&
            !__Tango_IsSpecialDataMarker(__Tango_StringBuffer[index-1])))
        index++;
    
    int buffer[256];
    Game->GetMessage(messageID, buffer);
    __Tango_LoadString(buffer, index);
}


// Implementation of @number
void __Tango_FuncNumber(int number, int pos)
{
    int buf[13];
    int numChars=itoa(buf, number);
    
    for(int i=0; i<numChars; i++)
    {
        __Tango_StringBuffer[pos]=buf[i];
        pos++;
    }
}


// Implementation of @ordinal
void __Tango_FuncOrdinal(int number, int pos)
{
    int buf[9];
    int numChars;
    int ordinal;
    
    number<<=0; // No fractions allowed.
    numChars=itoa(buf, number);
    ordinal=__Tango_GetOrdinal(number);
    
    if(ordinal==1) // "st"
    {
        buf[numChars]=115;
        buf[numChars+1]=116;
    }
    else if(ordinal==2) // "nd"
    {
        buf[numChars]=110;
        buf[numChars+1]=100;
    }
    else if(ordinal==3) // "rd"
    {
        buf[numChars]=114;
        buf[numChars+1]=100;
    }
    else // "th"
    {
        buf[numChars]=116;
        buf[numChars+1]=104;
    }
    
    numChars+=2;
    for(int i=0; i<numChars; i++)
    {
        __Tango_StringBuffer[pos]=buf[i];
        pos++;
    }
}


// Helper for __Tango_FuncOrdinal. 
int __Tango_GetOrdinal(int num)
{
    if(num<0)
        num=-num;
    
    // Check for 11, 12, and 13 first
    num%=100;
    if(num==11 || num==12 || num==13)
        return 0;
    
    return num%10;
}


// Implementation of @savename
void __Tango_FuncSaveName(int pos)
{
    int buf[9];
    Game->GetSaveName(buf);
    
    for(int i=0; buf[i]>0; i++)
    {
        __Tango_StringBuffer[pos]=buf[i];
        pos++;
    }
}


// Implementation of @string
void __Tango_FuncString(int string, int pos)
{
Trace(999);
Trace(string);
TraceS(string);
    int length=Min(strlen(string), __TANGO_MAX_STRING_FUNC_LENGTH);
    
    for(int i=0; i<length; i++)
    {
        __Tango_StringBuffer[pos]=string[i];
        pos++;
    }
}


// Implementation of @tab
void __Tango_FuncTab(int value)
{
    int dataStart=__Tango_Data[__TANGO_IDX_CURRSTR_DATA_START];
    int defStart=__Tango_Data[__TANGO_IDX_CURRSTR_DEF_START];
    __Tango_StringData[dataStart+__TANGO_DATA_CHAR_X]=
      __TANGO_STRING_DEFS[defStart+__TANGO_STRDEF_X]+value;
}


// Implementation of @choice
void __Tango_FuncAddMenuItem(int pos, int value)
{
    __Tango_StringBuffer[pos]=__TANGO_CHAR_CHOICE;
    __Tango_StringBuffer[pos+1]=value;
}


// Implementation of @domenu
void __Tango_FuncActivateMenu(int pos)
{
    Tango_ActivateMenu();
    
    // Insert the character to switch __Tango_Process() back to
    // normal behavior.
    __Tango_StringBuffer[pos]=__TANGO_CHAR_CHOICE_END;
    __Tango_StringBuffer[pos+1]=__TANGO_CHAR_FILLER;
}


// Get the current value of a variable. 
float __Tango_GetVar(int var)
{
    if(var>=__TANGO_VAR_D0 && var<=__TANGO_VAR_D7)
    {
        int index=(var-__TANGO_VAR_D0)*10000;
        return Tango_D[index];
    }
    else if(var==__TANGO_VAR_A0)
        return __Tango_GetCurrStrData(TANGO_DATA_A0);
    else if(var==__TANGO_VAR_A1)
        return __Tango_GetCurrStrData(TANGO_DATA_A1);
    else if(var==__TANGO_VAR_CSET)
        return __Tango_GetCurrentCSet();
    else if(var==__TANGO_VAR_COLOR)
        return __Tango_GetCurrentColor();
    else if(var==__TANGO_VAR_SPEED)
        return __Tango_GetCurrentSpeed();
    else if(var==__TANGO_VAR_SFX)
        return __Tango_GetCurrentSFX();
    else if(var==__TANGO_VAR_X)
        return __Tango_GetCurrStrData(__TANGO_DATA_SCREEN_X);
    else if(var==__TANGO_VAR_Y)
        return __Tango_GetCurrStrData(__TANGO_DATA_SCREEN_Y);
    else if(var==__TANGO_VAR_X)
        return __Tango_GetCurrStrData(__TANGO_DATA_NEXT_STRING);
    else if(var==__TANGO_VAR_DEFAULT)
        // TODO This isn't really correct, but is there a valid case where it might fail?
        return TANGO_DEFAULT;
    else if(var==__TANGO_VAR_CHOSEN)
        return __Tango_Data[__TANGO_IDX_LAST_CHOICE];
    
    return 0;
}


// Set a variable to the given value.
void __Tango_SetVar(int var, float value)
{
    int dataStart=__Tango_Data[__TANGO_IDX_CURRSTR_DATA_START];
    
    if(var>=__TANGO_VAR_D0 && var<=__TANGO_VAR_D7)
    {
        int index=(var-__TANGO_VAR_D0)*10000;
        Tango_D[index]=value;
    }
    else if(var==__TANGO_VAR_A0)
        __Tango_SetCurrStrData(TANGO_DATA_A0, value);
    else if(var==__TANGO_VAR_A1)
        __Tango_SetCurrStrData(TANGO_DATA_A1, value);
    else if(var==__TANGO_VAR_CSET)
        __Tango_SetCurrStrData(__TANGO_DATA_CSET, value);
    else if(var==__TANGO_VAR_COLOR)
        __Tango_SetCurrStrData(__TANGO_DATA_COLOR, value);
    else if(var==__TANGO_VAR_SPEED)
        __Tango_SetCurrStrData(__TANGO_DATA_SPEED, value);
    else if(var==__TANGO_VAR_SFX)
        __Tango_SetCurrStrData(__TANGO_DATA_SFX, value);
    else if(var==__TANGO_VAR_X)
        __Tango_SetCurrStrData(__TANGO_DATA_SCREEN_X, value);
    else if(var==__TANGO_VAR_Y)
        __Tango_SetCurrStrData(__TANGO_DATA_SCREEN_Y, value);
    else if(var==__TANGO_VAR_NEXT)
        __Tango_SetCurrStrData(__TANGO_DATA_NEXT_STRING, value);
}


// Fills the string with filler characters from pos to end, inclusive.
// Used to blank out functions so __Tango_Process() can proceed.
void __Tango_AddFiller(int pos, int end)
{
    for(; pos<=end; pos++)
        __Tango_StringBuffer[pos]=__TANGO_CHAR_FILLER;
}

