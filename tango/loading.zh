// tango.zh alpha 3
// Functions involved in loading strings into __Tango_StringBuffer[].


// Text-producing functions need a bit of padding to overwrite.
const int __TANGO_PAD_NUMBER = 12;
const int __TANGO_PAD_ORDINAL = 9;
const int __TANGO_PAD_SAVENAME = 8;
// @string's padding is customizable, so it's in the main tango.zh file.



void Tango_SetString(int stringID, int string)
{
    if(!__Tango_ValidateString(stringID))
        return;
    
    __Tango_SetCurrentString(stringID);
    int pos=__Tango_Data[__TCS_START];
    __Tango_LoadString(string, pos);
}


void Tango_SetMessage(int stringID, int messageID)
{
    if(!__Tango_ValidateString(stringID))
        return;
    
    int buffer[256];
    Game->GetMessage(messageID, buffer);
    
    __Tango_SetCurrentString(stringID);
    int pos=__Tango_Data[__TCS_START];
    __Tango_LoadString(buffer, pos);
}


void __Tango_LoadString(int string, int dest)
{
    __Tango_LogMessage(__TANGO_MSG_LOAD_START, string);
    int end=__Tango_GetStringEnd(string);
    int src=0;
    int newPos[2]; // __Tango_ParseCode() output
    
    while(src<=end)
    {
        if(string[src]==__TANGO_CODE_DELIMITER)
        {
            // Check if it's just @@ first
            if(string[src+1]==__TANGO_CODE_DELIMITER)
            {
                __Tango_SetChar(dest, __TANGO_CODE_DELIMITER);
                src+=2;
                dest++;
            }
            else
            {
                int oldDest=dest;
                __Tango_ParseCode(string, src+1, dest, newPos);
                src=newPos[0];
                dest=newPos[1];
                
                int filler=__Tango_PaddingNeeded(
                             __Tango_StringBuffer[oldDest+1], oldDest, dest);
                for(; filler>0; filler--)
                {
                    __Tango_SetChar(dest, __TANGO_CHAR_FILLER);
                    dest++;
                }
                
                if(dest>=__Tango_Data[__TCS_END])
                {
                    // Overflowed. Processing the string with an incomplete
                    // function might hang the game, so remove it.
                    __Tango_SetChar(oldDest, NULL);
                    break;
                }
            }
        }
        else
        {
            __Tango_SetChar(dest, string[src]);
            
            if(string[src]==NULL)
                break;
            
            src++;
            dest++;
        }
    }
    
    // Make certain the string is terminated. This is necessary if it
    // had trailing spaces or overflowed.
    dest=Min(dest, __Tango_Data[__TCS_END]-1);
    __Tango_StringBuffer[dest]=NULL;
    
    __Tango_LogMessage(__TANGO_MSG_LOAD_END, 0);
}


void __Tango_ParseCode(int string, int src, int dest, int output)
{
    bool done=false;
    int character;
    int accumulator=0;
    
    while(!done)
    {
        character=string[src];
        
        if(character>=__TANGO_CHAR_a && character<=__TANGO_CHAR_z)
        {
            character=character-__TANGO_CHAR_a+1; // 1-26
            accumulator*=__TANGO_CODE_FACTOR;
            accumulator+=character/10000;
            src++;
        }
        else if(character>=__TANGO_CHAR_0 && character<=__TANGO_CHAR_9)
        {
            character=character-__TANGO_CHAR_0+27; // 27-36
            accumulator*=__TANGO_CODE_FACTOR;
            accumulator+=character/10000;
            src++;
        }
        
        else if(character==__TANGO_CHAR_LPAREN)
        {
            // Found a left parenthesis, so this is flow control or a function
            if(accumulator==__TANGO_SETTER_SET ||
               accumulator==__TANGO_SETTER_INCREMENT)
                __Tango_SetChar(dest, __TANGO_SETTER_MARKER);
            else if(accumulator==__TANGO_FLOW_IF ||
                    accumulator==__TANGO_FLOW_ELSEIF ||
                    accumulator==__TANGO_FLOW_ELSE ||
                    accumulator==__TANGO_FLOW_WHILE ||
                    accumulator==__TANGO_FLOW_WAITUNTIL)
                __Tango_SetChar(dest, __TANGO_FLOW_MARKER);
            else
                __Tango_SetChar(dest, __TANGO_FUNC_MARKER);
            
            __Tango_SetChar(dest+1, accumulator);
            __Tango_ParseArgs(string, src+1, dest+2, output);
            src=output[0];
            dest=output[1];
            
            // Add the appropriate end marker
            if(accumulator==__TANGO_FLOW_IF ||
               accumulator==__TANGO_FLOW_ELSEIF ||
               accumulator==__TANGO_FLOW_ELSE ||
               accumulator==__TANGO_FLOW_WHILE ||
               accumulator==__TANGO_FLOW_WAITUNTIL)
            {
                __Tango_SetChar(dest, __TANGO_FLOW_END_MARKER);
                dest++;
            }
            else if(accumulator!=__TANGO_SETTER_SET &&
                    accumulator!=__TANGO_SETTER_INCREMENT)
            {
                __Tango_SetChar(dest, __TANGO_FUNC_END_MARKER);
                dest++;
            }
            
            done=true;
        }
        else if(character==TANGO_CHAR_SPACE || character==__TANGO_CHAR_RPAREN)
        {
            // Found a space or right parenthesis, so this is a variable
            done=true;
            __Tango_SetChar(dest, __TANGO_VAR_MARKER);
            __Tango_SetChar(dest+1, accumulator);
            dest+=2;
        }
        else if(character==NULL)
        {
            // End of the string? The function's incomplete.
            __Tango_LogError(__TANGO_ERROR_INCOMPLETE_FUNCTION, 0);
            done=true;
        }
        else // Invalid; just skip it
            src++;
    }
    
    output[0]=src;
    output[1]=dest;
}


// Scans each argument to a function to determine its type, then calls
// __Tango_ParseNumber() or __Tango_ParseCode() accordingly. Starts after
// the opening parenthesis and ends after the closing parenthesis.
void __Tango_ParseArgs(int string, int src, int dest, int output)
{
    bool done=false;
    int character;
    
    while(!done)
    {
        character=string[src];
        
        if((character>=__TANGO_CHAR_0 && character<=__TANGO_CHAR_9) ||
           character==__TANGO_CHAR_MINUS)
        {
            // This is a numeric argument
            __Tango_ParseNumber(string, src, dest, output);
            src=output[0];
            dest=output[1];
        }
        else if(character==__TANGO_CODE_DELIMITER)
        {
            // This is a code argument
            __Tango_ParseCode(string, src, dest, output);
            src=output[0];
            dest=output[1];
        }
        else if(character==__TANGO_CHAR_RPAREN)
        {
            // The end
            done=true;
            src++;
        }
        else if(character==NULL)
        {
            // End of the string? The function's incomplete.
            __Tango_LogError(__TANGO_ERROR_INCOMPLETE_FUNCTION, 0);
            done=true;
        }
        else // Either a space or an invalid character; skip it
            src++;
    }
    
    output[0]=src;
    output[1]=dest;
}


// Converts a number written out in a string to a ZScript number and
// loads the result into __Tango_StringBuffer.
void __Tango_ParseNumber(int string, int src, int dest, int output)
{
    bool done=false;
    bool negative=false;
    int character;
    int accumulator=0;
    
    character=string[src];
    if(character==__TANGO_CHAR_MINUS)
    {
        negative=true;
        src++;
    }
    
    while(!done)
    {
        character=string[src];
        
        if(character>=__TANGO_CHAR_0 && character<=__TANGO_CHAR_9)
        {
            accumulator*=10;
            accumulator+=character-__TANGO_CHAR_0;
            src++;
        }
        // TODO decimal points
        else if(character==TANGO_CHAR_SPACE || character==__TANGO_CHAR_RPAREN)
        {
            // End of the number
            if(negative)
                accumulator=-accumulator;
            __Tango_SetChar(dest, __TANGO_NUM_MARKER);
            __Tango_SetChar(dest+1, accumulator);
            dest+=2;
            done=true;
        }
        else
        {
            // Invalid character
            __Tango_LogError(__TANGO_ERROR_INCOMPLETE_FUNCTION, 0);
            done=true;
        }
    }
    
    output[0]=src;
    output[1]=dest;
}


// Find the number of filler characters to add for a function. It will be
// fewer than the number because the function and its arguments
// can be overwritten when the function runs.
int __Tango_PaddingNeeded(int function, int start, int end)
{
    int needed;
    
    if(function==__TANGO_FUNC_NUMBER)
        needed=__TANGO_PAD_NUMBER;
    else if(function==__TANGO_FUNC_SAVENAME)
        needed=__TANGO_PAD_SAVENAME;
    else if(function==__TANGO_FUNC_ORDINAL)
        needed=__TANGO_PAD_ORDINAL;
    else if(function==__TANGO_FUNC_STRING)
        needed=__TANGO_MAX_STRING_FUNC_LENGTH;
    
    return Max(needed-(end-start), 0);
}


void __Tango_SetChar(int pos, int character)
{
    if(pos>=__Tango_Data[__TCS_END])
    {
        __Tango_LogError(__TANGO_ERROR_OVERFLOW, 0);
        return;
    }
    
    __Tango_StringBuffer[pos]=character;
}

int __Tango_GetStringEnd(int string)
{
    int lastNonSpace=0;
    int pos=0;
    
    while(string[pos]!=0)
    {
        if(string[pos]!=TANGO_CHAR_SPACE)
            lastNonSpace=pos;
        pos++;
    }
    
    return lastNonSpace;
}
