// tango.zh
// Beta 2


// Standard settings -----------------------------------------------------------

// How fast messages scroll
const int __TANGO_SCROLL_SPEED = 4;

// How much holding A speeds up text
const int __TANGO_SPEEDUP_FACTOR = 5;

// Whether holding A or B speeds up scrolling to the next message
const int __TANGO_SCROLL_SPEEDUP = 0;

// Whether a sound is played when a space is printed
const int __TANGO_SFX_ON_SPACE = 0;

// Whether there's a delay before a space, as with printable characters
const int __TANGO_DELAY_ON_SPACE = 1;

// Strings that advance automatically will wait this long before doing so
const int __TANGO_AUTO_ADVANCE_TIME = 90;

// Layer to draw on
const int __TANGO_DRAWING_LAYER = 6;

// Offscreen bitmap to use for text rendering
const int __TANGO_BITMAP = 6;

// String codes are marked by this character
// 64 is @
const int __TANGO_CODE_DELIMITER = 64;

// Whether the current string scrolls up before displaying the next one
// rather than just disappearing
const int __TANGO_SCROLL_TO_NEXT = 1;

// The maximum length of a string handled by @string.
// Increasing this will make the function take more space in the buffer.
// It's not necessary to account for the null terminator.
const int __TANGO_MAX_STRING_FUNC_LENGTH = 16;

// End standard settings -------------------------------------------------------



// Advanced settings -----------------------------------------------------------

// Custom functions
const int FUNC_PORTRAIT = 1529.8275;

int __Tango_CustomFunctions[] = {
    FUNC_PORTRAIT
};

float __Tango_RunCustomFunction(float function, float args)
{
    if(function==FUNC_PORTRAIT)
    {
        // zeldaFrame[8] is Zelda's portrait tile
        if(args[0]==1) // Sad
            zeldaFrame[8]=1424;
        else // Happy
            zeldaFrame[8]=1420;
        return 0;
    }
    
    return 0;
}

const int __TANGO_MAX_MENU_ITEMS = 4;
float __Tango_Data[37]; // 25+3*__TANGO_MAX_MENU_ITEMS

// Available styles
const int __TANGO_NUM_STYLES = 7;
int __Tango_Styles[182]; // 26 * __TANGO_NUM_STYLES

// Text bufer and slots
int __Tango_Buffer[1216]; // Arbitrary size

const int __TANGO_NUM_SLOTS = 4;
int __Tango_SlotData[72]; // 18 * __TANGO_NUM_SLOTS

// Slot types and definitions
const int TANGO_SLOT_NAVI = 0;
const int TANGO_SLOT_POPUP = 1;
const int TANGO_SLOT_NORMAL = 2;

int __Tango_SlotDefs[] = {
    // 0
    TANGO_SLOT_NAVI,
    0,       // Starting index in __Tango_StringBuffer
    64,      // Maximum length after processing
    256, 0,  // X, Y on offscreen bitmap
    128, 64, // Width, height on offscreen bitmap
    
    // 1
    TANGO_SLOT_POPUP,
    64,
    128,
    256, 64,
    128, 64,
    
    // 2
    TANGO_SLOT_NORMAL,
    192,
    512,
    0, 0,
    256, 256,
    
    // 3
    TANGO_SLOT_NORMAL,
    704,
    512,
    0, 256,
    256, 256
};


// Edit these functions to change which buttons are used.

// Return Link->Press* for advance/end string button
bool __Tango_PressAdvance()
{
    return Link->PressA;
}

// Return Link->Input* for advance/end string button
bool __Tango_InputAdvance()
{
    return Link->InputA;
}

// Unset Link->Input* and Link->Press* for advance/end string button
void __Tango_UnpressAdvance()
{
    Link->InputA=false;
    Link->PressA=false;
}

// Return Link->Press* for speedup button
bool __Tango_PressSpeedup()
{
    return Link->PressA;
}

// Return Link->Input* for speedup button
bool __Tango_InputSpeedup()
{
    return Link->InputA;
}

// Unset Link->Input* and Link->Press* for speedup button
void __Tango_UnpressSpeedup()
{
    Link->InputA=false;
    Link->PressA=false;
}

// Return Link->Press* for super speed button
bool __Tango_PressSuperSpeed()
{
    return Link->PressB;
}

// Return Link->Input* for super speed button
bool __Tango_InputSuperSpeed()
{
    return Link->InputB;
}

// Unset Link->Input* and Link->Press* for super speed button
void __Tango_UnpressSuperSpeed()
{
    Link->InputB=false;
    Link->PressB=false;
}

// Return Link->Press* for menu select button
bool __Tango_PressMenuSelect()
{
    return Link->PressA;
}

// Return Link->Press* for menu cancel button
bool __Tango_PressMenuCancel()
{
    return Link->PressB;
}

// Return Link->Input* for both menu select and cancel buttons
bool __Tango_InputMenu()
{
    return Link->InputA || Link->InputB;
}

// Unset Link->Input* and Link->Press* for menu select and cancel buttons
void __Tango_UnpressMenu()
{
    Link->InputA=false;
    Link->PressA=false;
    Link->InputB=false;
    Link->PressB=false;
}

// These are used by TANGO_FLAG_FREEZE_SCREEN.
void __Tango_FreezeScreen()
{
}

void __Tango_UnfreezeScreen()
{
}

// Import stringControlCode.zh instead of stringControlCodeDisabled.zh
// to enable string control codes.
//import "tango/stringControlCodeDisabled.zh"
import "tango/stringControlCode.zh"

// Import loggingFull.zh instead of loggingMinimal.zh for more useful
// error messages. This will bloat scripts, so it should only be used
// for debugging.
import "tango/loggingMinimal.zh"
//import "tango/loggingFull.zh"

// End advanced settings -------------------------------------------------------


import "tango/common.zh"
import "tango/drawing.zh"
import "tango/font.zh"
import "tango/functions.zh"
import "tango/loading.zh"
import "tango/menu.zh"
import "tango/messages.zh"
import "tango/metrics.zh"
import "tango/processing.zh"
import "tango/style.zh"
import "tango/user.zh"
import "tango/validation.zh"

import "tango/script.z"

