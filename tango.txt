tango.zh alpha 3


ZScript

float Tango_D[8]
Arbitrary data. Can be used to allow ZScript and string codes to communicate.


Tango_Start()
Tango_Update1()
Tango_Update2()
Global script functions.

int Tango_GetFreeString()
int Tango_GetFreeString(int stringType)
Get the number of a string not currently in use. You can pass in TANGO_STRING_ANY or leave out the argument if you don't care about the size.

bool Tango_ReserveString(int stringID)
Mark a string as reserved, preventing Tango_GetFreeString() from returning the ID. Use this is you get a string ID and don't plan to use it immediately.
Returns true if the reservation succeeded (i.e. the string wasn't already in use).
Changing screens or using Tango_ClearString() will clear the reserved state.

void Tango_ClearString(int stringID)
Clear all data for the given stringID. You should call this before setting up a new string.

void Tango_SetString(int stringID, int string[])
void Tango_SetMessage(int stringID, int messageID)
Load a string into the buffer. Tango_SetString takes a ZScript string; Tango_SetMessage takes a message number.

int Tango_GetStringStyle(int stringID)
void Tango_SetStringStyle(int stringID, int style)
Get or set the style used by a string.

void Tango_SetStringPosition(int stringID, int x, int y)
Position a string on the screen.

void Tango_ActivateString(int stringID)
Display the string on the screen. Do this only after the text, style, and position.

bool Tango_StringIsVisible(int stringID)
Returns true if the string is displayed on the screen.

float Tango_GetStringData(int stringID, int what)
void Tango_SetStringData(int stringID, int what, float value)
Use to read or set a string's a[0] and a[1]. The what argument should be TANGO_DATA_A0 or TANGO_DATA_A1.

int Tango_GetStyleAttribute(int style, int attribute)
void Tango_SetStyleAttribute(int style, int attribute, int value)
Get or set a style attribute. Use the TANGO_STYLE arguments constants for the attribute argument.

void Tango_ClearStyle(int styleID)
Clear all data for a given style.

Style attributes:
TANGO_STYLE_BACKDROP_TYPE
Backdrop type. Should be one of:
    TANGO_BACKDROP_CLEAR
    TANGO_BACKDROP_COLOR
    TANGO_BACKDROP_COLOR_TRANS
    TANGO_BACKDROP_IMAGE
    TANGO_BACKDROP_IMAGE_TRANS
    TANGO_BACKDROP_COMPLEX

TANGO_STYLE_BACKDROP_DATA
Backdrop data array. Only used with complex backdrops.

TANGO_STYLE_BACKDROP_TILE
Backdrop starting tile. Only used with image backdrops.

TANGO_STYLE_BACKDROP_CSET
Backdrop CSet. Only used with color and image backdrops.

TANGO_STYLE_BACKDROP_COLOR
Color 0-15 within the CSet. Only used with color backdrops.

TANGO_STYLE_BACKDROP_WIDTH
TANGO_STYLE_BACKDROP_HEIGHT
Backdrop size. Only used with images and color backdrops.
For images, use tile size. For colors, use pixel size.

TANGO_STYLE_TEXT_FONT
Text font.

TANGO_STYLE_TEXT_X
TANGO_STYLE_TEXT_Y
TANGO_STYLE_TEXT_WIDTH
TANGO_STYLE_TEXT_HEIGHT
Text position and size in pixels.

TANGO_STYLE_TEXT_CSET
TANGO_STYLE_TEXT_COLOR
Text color. TANGO_STYLE_TEXT_COLOR is color 0-15 within the CSet.
TANGO_STYLE_TEXT_COLOR only applies to built-in font characters.

TANGO_STYLE_TEXT_SPEED
TANGO_STYLE_TEXT_SFX
Default text speed and sound. Same as in the string editor.

TANGO_STYLE_TEXT_END_SFX
Plays when a string finishes.

TANGO_STYLE_CURSOR_COMBO
TANGO_STYLE_CURSOR_CSET
TANGO_STYLE_CURSOR_WIDTH
TANGO_STYLE_CURSOR_MOVE_SFX
TANGO_STYLE_CURSOR_SELECT_SFX
Settings for the menu cursor.

TANGO_STYLE_MORE_COMBO
TANGO_STYLE_MORE_CSET
TANGO_STYLE_MORE_X
TANGO_STYLE_MORE_Y
Settings for the "Press A to continue" indicator.

TANGO_STYLE_FLAGS
One or more flags ORed together or 0 for none. Flags are:
    TANGO_FLAG_ENABLE_SPEEDUP
    Hold A to speed up text.
    
    TANGO_FLAG_ENABLE_SUPER_SPEED
    Hold B to speed up text even more.
    
    TANGO_FLAG_AUTO_ADVANCE
    Text advances to the next string and is cleared without the user pressing A.
    
    TANGO_FLAG_CARRY_OVER
    The string isn't cleared when the screen changes.
    
    TANGO_FLAG_LINE_BY_LINE
    Text is printed one line at a time instead of one character at a time.
    
    TANGO_FLAG_BLOCK_INPUT
    All input will be canceled while this string is onscreen. This doesn't interfere with menus or the speedup flags.
    Note: FFC scripts run before the global script. FFC scripts and anything before Tango_Update() in the global script will see the original input.

void Tango_InitializeMenu()
Clear all menu data.

void Tango_SetMenuCursor(int combo, int cset)
void Tango_SetMenuCursor(int combo, int cset, int width, int height)
Set the combo to be used by the menu cursor. Width and height default to 1.

void Tango_SetMenuSFX(int moveSound, int selectSound)
Set the menu sounds.

void Tango_AddMenuChoice(int value, int x, int y)
Add a menu item with the given value at the given position. value should not be 0.

void Tango_ActivateMenu()
Activate the menu with the current settings.

bool Tango_MenuIsActive()
Returns true if a menu is currently active.

int Tango_GetLastMenuChoice()
Returns the last choice made in a menu. Returns 0 if a menu is currently active or no menu has been shown yet.

void Tango_Sync(int value)
Used to synchronize a script and a string. See @sync().



String codes



Flow control functions
Note: these can not be nested.

@while(a1 a2)
a1: condition or number
a2: flow control or effect function
Execute a2 as long as a1 is true. Runs once a frame.

@if(a1 a2)
@elseif(a1 a2)
@else(a2)
a1: condition or number
a2: flow control or effect function
Execute a2 if a1 is true. @elseif and @else should come immediately after the corresponding @if; they are not guaranteed to work correctly, otherwise.

@waituntil(a1)
a1: condition or number
Pauses the text until a1 is nonzero.



Effect functions
These functions perform some function in the game or affect the string in a way not covered by other functions. They do not return useful values.

@set(a1 a2)
a1: variable
a2: number or @default
Set a1 to a2.

@increment(a1 a2)
a1: variable
a2: number
Increase the value of a1 by a2.

@playsfx(a1)
a1: number
Play a sound.

@append(a1)
a1: number
Appends another message to the end of the string. Useful if you run out of space or want to choose between multiple followups.

@delay(a1)
a1: number
Pauses the text for a1 frames. Speeding up the text will reduce the time accordingly.

@pressa()
Prompts the player to press A before the string continues.

@next(a1)
a1: number
Sets the message with the given number to follow the current one. Equivalent to @set(@next a1)

@goto(a1)
a1: number
Immediately ends the current string and switches to message a1.

@sync(a1)
@sync(a1 a2)
a1: number
a2: number
This can be used to synchronize multiple strings or to synchronize a string and script. The first string to call @sync with one argument is suspended. When a second string calls it with the same argument, both strings continue processing. In other words, when two strings running simultaneously call @sync(5), the first one to reach that function will stop and wait for the other to catch up.
If two arguments are used, any strings waiting for a1 will be resumed, but the current string will not stop if no other string is waiting for it. It will treat the second argument the same way it would a single one. This is almost the same as calling @sync(a1)@sync(a2), except the first call would never hang. This is convenient for synchronizing multiple strings.
Tango_Sync() works in the same way. A call to Tango_Sync() will not return until a string calls @sync() with the same value. Do not count on this coordination being precisely timed; there may be a discrepancy of a frame or two.

@tab(a1)
a1: number
Indents the text to a1 pixels. This may be left of the current position, causing the following text to be printed over earlier text.

@close()
Immediately deactivates the current string.


Numeric functions
These functions return numbers. They can be used as numeric or conditional arguments to other functions.

@add(a1 a2)
a1: number
a2: number
Returns a1+a2

@rand(a1 a2)
a1: number
a2: number
Returns a number between a1 and a2, inclusive.



Text functions
These functions insert text into the string.

@char(a1)
a1: number
Inserts the character with the given number. Use for characters>=127 or line breaks (26).

@number(a1)
a1: number
Inserts a number as text.

@ordinal(a1)
a1: number
Inserts a number as text followed by "st", "nd", "rd", or "th".

@savename()
Inserts the save file name.

@string(a1)
a1: number (ZScript string pointer)
Inserts an arbitrary ZScript string. Functions in this string will not be executed.



Condition functions
These return 1 if a condition is true or 0 if it's false. They can be used as numeric functions, but they're intended to be used with @if, @while, and @waituntil.

@equal(a1 a2)
a1: number or condition
a2: number or condition
True if a1 and a2 are equal.

@notequal(a1 a2)
a1: number or condition
a2: number or condition
True if a1 and a2 are not equal.

@greater(a1 a2)
a1: number or condition
a2: number or condition
True if a1 is greater than a2.

@less(a1 a2)
a1: number or condition
a2: number or condition
True if a1 is less than a2.

@and(a1 a2)
a1: number or condition
a2: number or condition
True if a1 and a2 are both nonzero.

@or(a1 a2)
a1: number or condition
a2: number or condition
True if at least one of a1 and a2 is nonzero.

@not(a1)
a1: number or condition
True if a1 is zero, false otherwise.



Menu functions
Use these functions to set up a menu.

@choice(a1)
a1: number
Creates a menu option with value a1. a1 should not be 0. You can add up to 4 options.

@domenu(a1)
a1: condition
Activates the menu and suspends further processing until a selection is made. If a1 is true, the player can press B to cancel.

@menuwait()
Waits for a menu selection to be made. Don't use this together with @domenu(); it should be used when another string or a script will create the menu.



Variables

@d0 ... @d7
Read/write
Use this to access Tango_D[].

@a0, @a1
Read/write
Use these to access the string's a[0] and a[1].

@x, @y
Read/write
The string's position on the screen.

@cset, @color
Read/write
The string's current text color. @color refers to color 0-15 within the CSet and only applies to built-in font characters.

@speed
Read/write
The current text speed.

@sfx
Read/write
The current text sound.

@style
Read/write
The string's current style. You should only write to this at the beginning of a string, before any text is printed.

@next
Read/write
The next string to be shown after the current one.

@chosen
Read-only
The last option chosen in a menu. This is 0 if a menu is currently active, if no menu has been displayed yet, or if the player canceled in the last menu.

@default
Read-only
This is a pseudo-variable used to reset style variables to the default. There are only four valid uses:
@set(@cset @default)
@set(@color @default)
@set(@speed @default)
@set(@sfx @default)



Custom functions

It's possible to create your own string functions. These can be numeric, effect, or condition functions.
The function's name must be a series of lower-case letter and numbers. There's no set limit on length, but the name must convert to a number small enough to be represented in ZScript (no greater than 214747.9999).

To get a function ID, convert each character in the name to a number:
a  b  c ... x  y  z  0  1  2  ... 7  8  9
1  2  3 ... 24 25 26 27 28 29 ... 34 35 36

Then multiply them by 7^n according to their position, add them up, and divide by 10000. For instance, for a function called @dostuff2:

d   4   x7 x7 x7 x7 x7 x7 x7 = 3294172 +
o   15  x7 x7 x7 x7 x7 x7    = 1764735 +
s   19  x7 x7 x7 x7 x7       =  319333 +
t   20  x7 x7 x7 x7          =   48020 +
u   21  x7 x7 x7             =    7203 +
f   6   x7 x7                =     294 +
f   6   x7                   =      42 +
2   29                       =      29
                               -------
                               5433828 / 10000 = 543.3828

So you'd create a constant with that value:
const float FUNC_DOSTUFF2 = 543.3828;

Add it into __TANGO_CUSTOM_FUNCTIONS[] and set __TANGO_NUM_CUSTOM_FUNCTIONS accordingly.

const int __TANGO_NUM_CUSTOM_FUNCTIONS = 3;

int __TANGO_CUSTOM_FUNCTIONS[] = {
    FUNC_MYFUNC,
    FUNC_DOSTUFF1,
    FUNC_DOSTUFF2
};

Then fill in the implementation in __Tango_RunCustomFunction(). The function
argument is the function ID. args is an array containing the arguments.
A function can take up to two arguments. 

float __Tango_RunCustomFunction(float function, float args)
{
    if(function==FUNC_DOSTUFF2)
    {
        // This'll just return the sum of the arguments.
        return args[0]+args[1];
    }
    
    return 0;
}

Note that it's possible, although very unlikely, for two function names
to convert to the same number. In that case, you'll just have to rename
one of them.

